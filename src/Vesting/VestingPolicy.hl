module VestingPolicy

// specialized to ...
//   -   NOT YET SPECIALIZED (replace with your specialization notes here) - 
// original notes about (un)specialization follow:


//  //! provides a basic version, not yet specialized,
//  // of the "specializedDelegate" interface, which simply
//  // exports a DelegateDatum enum and DelegateActivities (redeemer enum).  

//  //! Your specialization MUST include the enum variants found in this
//  //  ... unspecialized version.  It MAY include additional Datum variants.
//  // Any additional Redeemer/Activity variants should be added underneath 
//  // the SpendingActivity / MintingActivity top-level enum variants, instead 
//  // of adding new top-level enum variants to DelegateActivity.

//  // The DelegateActivity (redeemer) enum conforms to the 
//  // Delegate Redeemer protocol, in which enum 0 is reserved for
//  // lifecycle activities, enum 1 is used for spend-related activities 
//  // (if the delegate is used as a spend delegate), and enum 2 is called
//  // for authorizing minting.  Enum 3 and beyond are reserved for
//  // extensions to the Delegate Redeemer protocol.

//  // Within the minting and spending activities, the specialization can 
//  // indicate a nested activity enum to support various dApp-specific
//  // activities.  

//  // Activities that validate minting of UUTs should contain enum fields 
//  // to identify the seed-transaction details needed for properly validating 
//  // UUT mints fitting the use-case.

//  //! Your specialization MAY include any additional functions, imports or 
//  //  methods defined on any of the types in this file.

import {
    tx, 
    get_current_input,
    get_current_validator_hash,
    get_cont_outputs
} from ScriptContext

import {
    DelegationDetail,
    mustReturnValueToScript,
    DelegateLifecycleActivity,
    CapoLifecycleActivity,
    unmodifiedDelegation
} from CapoDelegateHelpers

import {
    validateUutMinting,
    mkUutTnFactory
} from CapoMintHelpers

// import {
//     ProtocolSettings
// } from ProtocolSettings

import {
    VestingData,
    VestingState
} from VestingData

import {
    CapoCtx,
    mkCapoCtx,
    DgDataDetails,
    mkTv,
    AnyData 
} from CapoHelpers

import {
    TODO,
    REQT,
    bREQT
} from StellarHeliosHelpers

// import {
//     TierLookupResult
// } from TieredScale
//
// import {
//     PriceNeeded,
//     validateRequiredValue,
//     ValueValidator
// } from PriceValidator



enum DelegateDatum {
    // we only have to use this if we decide Constr#0 is essential for practical CIP-68 compat
    Cip68RefToken {  
        // NOTE: this datum contains reference details for a user-facing token minted according to the cip-68 standard 
        //  - the asset name (in the Value of this UTXO) MUST be:  #000643b0 + tokenName
        //     - this asset name can serve user-side tokens using the CIP-68 "222", "333" or other token types.
        //     - the user-side asset name with its (222/333/etc) CIP-67 prefix and 
        //       ... its remaining tokenName will be matched to this asset name (#000643b0 +tokenName)
        //       ... to locate this reference datum; this datum content will be interpreted
        //       ... according to the semantics implied by the user-side asset-name prefix.
        //
        //  - The attached 'meta' field in this Datum variant contains the relevant data, depending on the token type
        //    - for "222" tokens, the meta field should contain the following fields:
        //        - "name" : String
        //        - "description" : String 
        //        - "files" :   // {mediaType, src (url), name?, ... otherFields)
        //        - "image": String  // image url: https://, ar://, ipfs:// or data:// (RFC2397 data)
        //    - for "333" tokens, the meta field should contain the following fields:
        //        - "name" : String
        //        - "description" : String 
        //        - "ticker" : String
        //        - "url": String  // project URL
        //        - "logo": String  // image url: https://, ar://, ipfs:// or data:// (RFC2397 data)
        //                    - it must have a mime type `image/png`, `image/jpeg` or `image/svg+xml`
        //        - "decimals" : Int

        cip68meta: AnyData
        cip68version: Int
        otherDetails: Data
        // otherDetails: Data // can be Unit () or anything else
    }

    IsDelegation {
        dd: DelegationDetail
    }
    // same variant-index as Capo's DelegatedData
    capoStoredData {
        data: VestingData
        version: Int
        otherDetails: Data 
    }

    // func validateSettings(self, settings: ProtocolSettings) -> Bool{
    // ... get the settings object from the contract manifest via cctx
    //     assert(false, "not valid (stubbed)");
    //     settings.serialize() != self.serialize() &&
    //     true
    // }
}


enum MintingActivity {
    CreatingRecord{
        seed: TxOutputId
    }
}

//! The minting delegate can also be used as a general spending 
// delegate (this is the default arrangement during the Capo 
// charter mint).  These activities are required by the Capo when
// spending utxos having DelegatedDatum type.
enum SpendingActivity {
    UpdatingRecord {
        id: ByteArray
    }
    SwitchToVerifying {
        id: ByteArray
    }
    VerifyingBeneficiary {
        id: ByteArray
    }
    Activating {
        id: ByteArray
    }
    Withdrawing {
        id: ByteArray
        // ???
        value: Value
    }
    Pausing {
        id: ByteArray
    }
    Resuming {
        id: ByteArray
    }
    Closing {
        id: ByteArray
    }
}

func ensureConstrainedTxValidity() -> () {
    assert(
        tx.time_range.end - tx.time_range.start 
            <= Duration::HOUR,
        "txn duration err"
    )
}

func daysInFuture(nowPlusDays: Int) -> TimeRange {
    ensureConstrainedTxValidity();
    expiryDuration : Duration = Duration::DAY * nowPlusDays;
    leeway : Duration = 1 * Duration::HOUR;
    latestAcceptable : Time = tx.time_range.end + expiryDuration + leeway;
    
    TimeRange::new(
        tx.time_range.start + expiryDuration,
        latestAcceptable
    )
}

enum BurningActivity {
    DeletingRecord {
        id: ByteArray
    }
}

enum DelegateActivity {
    // must ALWAYS be at Enum position 0
    CapoLifecycleActivities {
        activity: CapoLifecycleActivity
    }

    // must ALWAYS be at Enum position 1
    DelegateLifecycleActivities {
        // administrative activities for the delegate lifecycle, enforced
        //  by the basic mint delegate code.  Specializations can add more 
        //  restrictions, but in many/most cases they will not need to.
        activity: DelegateLifecycleActivity
    }

    // application-specific spending activities, ALWAYS at Enum position 2
    SpendingActivities {
        activity: SpendingActivity
    }

    // application-specific minting activities, ALWAYS at Enum position 3
    MintingActivities {
        activity: MintingActivity
    }

    BurningActivities {
        activity: BurningActivity
    }
    
    CreatingDelegatedData {
        seed: TxOutputId
        dataType: String
        // record id created from seed
    }

    UpdatingDelegatedData {
        // no seed
        dataType: String
        recId: ByteArray
    }

    DeletingDelegatedData {
        // no seed
        dataType: String
        recId: ByteArray
    }

    MultipleDelegateActivities {
        // todo: change this back when the recursive enum's `__is_valid_data not found` error is resolved
        activities: []Data // actually a DelegateActivity
    }

    OtherActivities {
        activity: Data // specialized activities can be added here
    }

    // this function gives a general-purpose implementation of checking for 
    // valid uut minting. 
    //
    // A specialization might modify it to use different policies
    // or enforce additional requirements
    // 
    // func genericUutMinting(self, 
    //     mdd: DelegateDatum
    // ) -> Bool {
    //     //!!! replace with an activity using the same seed-txn pattern:
    //     // MintingActivities::SomethingMintingUuts{sTxId, sIdx, purposes} = self;
    //     DelegateDatum::IsDelegation{dd} = mdd;
    //     returnsAuthzToken : Bool = mustReturnValueToScript(dd.tvAuthorityToken());

    //     o : []TxOutput = get_cont_outputs();
    //     if (o.length != 1) { error("single utxo only") };

    //     print ("in unsp_MD");
    //     isOk : Bool = returnsAuthzToken && 

    //     unmodifiedDelegation( /* isD, same as mdd */ mdd.serialize()) &&

    //     // This call can serve as a template for enforcing expected mints 
    //     // of uuts (and additional token values) in validation of application-
    //     // specific activities, given (mph, sTxId, sIdx, purposes)
    //     validateUutMinting(
    //         mph: dd.mph,
    //         seedTxId: sTxId, 
    //         seedIdx: sIdx, 
    //         purposes: purposes,
    //         // otherMintedValue: ()
    //         mkTokenName: mkUutTnFactory(sTxId, sIdx)
    //     );

    //     isOk
    // }

    //! used only for validating IsDelegation datum, that is,
    //   ... to approve minting requests or any customize spending modes 
    //   ... of that datum.  
    
    //  Note that the basic delegate already enforces some basic
    //    administrative expectations for DelegateLifecycleActivities and CapoLifecycleActivities
    //    so a specialization doesn't need to re-implement those checks.
    func additionalDelegateValidation( self,
        priorMddd: DelegateDatum::IsDelegation,
        cctx: CapoCtx
    ) -> Bool {
        print("  -- addl dgt val ");
        self.switch {
            // generic DelegateLifecycleActivities is already validated, but 
            //  ... you can add more constraints here if needed
            DelegateLifecycleActivities => true,
            CapoLifecycleActivities => {
                // only mint/spend delegates answer to CapoLifecycleActivities
                error("unreachable in a dgDataPolicy")
            },
            MintingActivities{ma} => ma.switch {
                CreatingRecord{seed} => {
                    print("registering a new vesting instance...");

                    REQT("the operator must provide a valid minting seed");
                    mkTn : (String) -> String = mkUutTnFactory(seed);

                    // mints a vest-* UUT
                    mintingOk : Bool = validateUutMinting(
                        mph: priorMddd.dd.mph,
                        seed: seed,
                        purposes: []String{"vest"},
                        // otherMintedValue: ()
                        mkTokenName: mkTn,
                        // WE ARE the mint delegate.
                        needsMintDelegateApproval: false 
                    );

                    assert(cctx.withCharterRef().orFail(), "no charter ref");

                    newRecData : DgDataDetails = cctx.creatingDgData(mkTn("vest"));
                    _newDataOut : TxOutput = newRecData.output();

                    rec: VestingData = VestingData::from_data(
                        newRecData.outputData()
                    );

                    assert(
                        tx.time_range.end - tx.time_range.start 
                            <= Duration::HOUR,
                        "txn duration err"
                    );

                    // has the owner-token reference
                    ownerToken = rec.ownerToken;
                    ownerTokenAc : AssetClass = AssetClass::new(
                        priorMddd.dd.mph, ownerToken
                    );
                    
                    REQT("verifies the owner-token's presence in the txn");
                    // has the owner-token in the txn
                    tx.inputs.find_safe((i: TxInput) -> Bool {
                        i.value.get_safe(ownerTokenAc) == 1
                    }).switch {
                        None => error("missing owner token"),
                        Some => true
                    } &&
                    bREQT("verifies creation-details") && 
                    rec.validateCreated().trace("creation ok? ") &&
                    bREQT("verifies the vesting instance's overall validity") &&
                    rec.validate().trace("verify ok? ") &&
                    mintingOk
                }
            },
            SpendingActivities{x} => {
                assert(cctx.withCharterRef().orFail(), "no charter ref");

                x.switch {                    
                    UpdatingRecord{recId} => {
                        print("updating the details for a vesting instance...");

                        vestingDD : DgDataDetails = cctx.updatingDgData(recIdBytes: recId);
                        _rec : VestingData = VestingData::previous(vestingDD);
                        _updated : VestingData = VestingData::updated(vestingDD);

                        hasRecInput : (TxInput) -> Bool = 
                            cctx.mkDelegatedDataPredicate("vest", recId);

                            hasRecOutput : (TxOutput) -> Bool = 
                            cctx.mkDelegatedDataOutputPredicate("vest", recId);
                        
                        tx.inputs.filter(hasRecInput).for_each( (utxo : TxInput) -> () {
                            // they're all vesting instances, because of the above.
                            inputData = 
                                VestingData::from_data(utxo.datum.inline);
                            assert(inputData.state == VestingState::Initializing, "update requires state=Initializing");

                            updatedUtxo : TxOutput = tx.outputs.find(hasRecOutput);
                            updatedData = 
                                VestingData::from_data(updatedUtxo.datum.inline);

                            assert(updatedData.validate(), "<-- that throws; this can't."); // throws if invalid
                            ()
                        });

                        true
                    },
                    SwitchToVerifying{recId} => {
                        vestingDD : DgDataDetails = cctx.updatingDgData(recIdBytes: recId);
                        _rec : VestingData = VestingData::previous(vestingDD);
                        _updated : VestingData = VestingData::updated(vestingDD);
                      
                        REQT("switches the vesting instance to verifying mode")
                        REQT("requires the owner-token's presence in the txn")
                        REQT("doesn't change any details of the vesting data")
                        TODO("^^^")
                        false
                    },
                    VerifyingBeneficiary{recId} => {
                        vestingDD : DgDataDetails = cctx.updatingDgData(recIdBytes: recId);
                        _rec : VestingData = VestingData::previous(vestingDD);
                        _updated : VestingData = VestingData::updated(vestingDD);

                        REQT("verifies the beneficiary-token's presence in the txn")
                        // beneficiaryToken = rec.beneficiaryToken;
                        TODO("^^^")
                        REQT("requires that the beneficiary-token is not changed")
                        // assert(rec.beneficiaryToken == updated.beneficiaryToken, "beneficiary token changed");

                        // _beneficiaryTokenAc = AssetClass::new(
                        //     priorMddd.dd.mph, 
                        //     beneficiaryToken                            
                        // )

                        TODO("implement this!")
                        false
                    },
                    Activating{recId} => {
                        vestingDD : DgDataDetails = cctx.updatingDgData(recIdBytes: recId);
                        _rec : VestingData = VestingData::previous(vestingDD);
                        _updated : VestingData = VestingData::updated(vestingDD);

                        REQT("activates the vesting instance")
                        REQT("verifies the owner-token's presence in the txn")
                        REQT("doesn't change any details of the vesting data")
                        REQT("requires that the indicated totalAmount is deposited")
                        TODO("verifies the beneficiary-token's presence in the txn")
                        // beneficiaryToken = rec.beneficiaryToken

                        // _beneficiaryTokenAc : AssetClass = AssetClass::new(
                        //     priorMddd.dd.mph, beneficiaryToken
                        // )
    
                        TODO("implement this!")
                        false
                    },
                    Withdrawing{recId, _value} => {
                        vestingDD : DgDataDetails = cctx.updatingDgData(recIdBytes: recId);
                        _rec : VestingData = VestingData::previous(vestingDD);
                        _updated : VestingData = VestingData::updated(vestingDD);

                        REQT("StraighLine is supported");
                        REQT("Once is NOT supported");
                        REQT("SimpleContingency is NOT supported");
                        
                        REQT("withdraws the vesting instance")
                        REQT("fails if the vesting instance is not Active")
                        REQT("requires the beneficiary-token's presence in the txn")
                        REQT("requires that the correct funds are withdrawn")
                        REQT("doesn't change any details of the vesting data")
                        REQT("updates the lastPartialMaturity to fit the configured vesting frequency")

                        REQT("... on the last vesting period:")
                        REQT("   -- last vesting: no funds may remain")
                        REQT("   -- last vesting: the state must be Closed 'complete'")

                        TODO("implement this!")
                        false
                    },
                    Pausing{recId} => {
                        vestingDD : DgDataDetails = cctx.updatingDgData(recIdBytes: recId);
                        _rec : VestingData = VestingData::previous(vestingDD);
                        _updated : VestingData = VestingData::updated(vestingDD);

                        REQT("pauses the vesting instance")
                        REQT("requires the owner-token's presence in the txn")
                        REQT("requires a Pause reason")
                        REQT("doesn't change any details of the vesting data")

                        TODO("implement this!")
                        false
                    },
                    Resuming{recId} => {
                        vestingDD : DgDataDetails = cctx.updatingDgData(recIdBytes: recId);
                        _rec : VestingData = VestingData::previous(vestingDD);
                        _updated : VestingData = VestingData::updated(vestingDD);

                        REQT("resumes the vesting instance")
                        REQT("requires the owner-token's presence in the txn")
                        REQT("doesn't change any details of the vesting data")

                        TODO("implement this!")
                        false
                    },
                    Closing{recId} => {
                        vestingDD : DgDataDetails = cctx.updatingDgData(recIdBytes: recId);
                        _rec : VestingData = VestingData::previous(vestingDD);
                        _updated : VestingData = VestingData::updated(vestingDD);

                        REQT("closes the vesting instance");
                        REQT("requires the owner-token's presence in the txn")
                        REQT("requires a Close reason")
                        REQT("doesn't change any details of the vesting data")
                        REQT("withdraws any remaining funds to a destination specified by the owner")

                        TODO("implement this!")
                        false
                    }
                }
            },
            BurningActivities => error("no burn activity here yet"),
            OtherActivities => error(
                "no other activities exist in this delegate"
            ),
            _ => false
        } || tx.serialize() == priorMddd.serialize()        
    }

    func supportedCapoDelegatePurposes(self) -> []String {
        assert(true || /* prevent unused variable */ self == self, "no way" );
        []String{ /* "nothingHereYet", */ }
    }

    //! Used only for validating non-IsDelegation datum types and activities.
    // if you have any special admininstrative data structures that inform 
    // ...  your minting policy, this might be useful.  Otherwise, and typically,
    // ... you should look to Activity validations above in additionalDelegateValidation,
    // ...  in which the isDelegation token is being spent with an application-specific
    // ...  activity/redeemer
    func otherDatumValidation(self,
        _priorMdd: DelegateDatum
    ) -> Bool {
        neverTriggered = () -> {  error("never called") };
        self.switch{
            // Note: this set of DelegateActivities is reserved for the IsDelegation datum.
            //  Using it on any other Datum type will always fail and execution will never arrive here.
            DelegateLifecycleActivities => neverTriggered(),
            CapoLifecycleActivities => neverTriggered(),

            // -- Application-specific activities can be added here 
            // -- for special & app-specific types of datum in a delegate,
            // -- for EXCEPTIONAL cases, if you really know what you're doing.  
            //  -- see above for normal cases

            _ => false  // prevents non-exhaustive match errors, even if you remove the above neverTriggered() calls
        }
    }
}

