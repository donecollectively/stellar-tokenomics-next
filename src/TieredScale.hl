module TieredScale
import {
    AnyData
} from CapoHelpers

struct Tier {
    type: String
    threshold: Int
    name: String
    /**
     * actually an Enum 
     * interpreted in specific context with variants having their own concrete types
     */
    scaledDetails: Data    
}


// struct TierLookupResult {
//     // scaledValue: Real
//     scaledDetails: Option[
//         Data
//         // actually an Enum with variants having their own concrete types
//     ]
// }

struct TieredScale {
    tiers: []Tier

    func findTierValue(self, value: Int) -> Option[Data] {
        // list.fold_lazy[ReducedType: Any](
        //     reducer: (item: ItemType, next: () -> ReducedType) -> ReducedType,
        //     final: ReducedType
        // ) -> ReducedType
        print("  -- tiered scale: lookup value "+value.show());
        result = self.tiers.fold_lazy[Option[Data]](
           // reducer: 
            (thisTier: Tier, next : () -> Option[Data]) -> Option[Data] {
                higherTierResult : Option[Data] = next(); // go deep first, to the latest possible item in the list
                success : Option[Data] = higherTierResult.switch { 
                    None => {
                        // this is potentially a match, if the threshold is met by the item
                        // print("     -- checking tier "+ thisTier.threshold.show());
                        if (value < thisTier.threshold) { // this tier is too big to match the input value.
                            // no-match; defers to the next smaller tier at a lesser depth 
                            Option[Data]::None
                        } else {
                            print("    <--  found tier '"+ thisTier.name + "' at threshold "+ thisTier.threshold.show());
                            Option[Data]::Some{thisTier.scaledDetails}
                        }                    
                    }, 
                    Some => {
                        // pops back through all the earlier items, returning 
                        //   that last tier having any successful lookup result
                        higherTierResult 
                    }
                };

                 success
            },
            // the "final" item for the fold is a no-match indticator
            Option[Data]::None
        )

        result.switch {
            None => {
                print("  -- tiered scale: no tier found for value "+value.show());
            }
        }
        result
    }
}


struct TierAsInt {
    type: String
    threshold: Int
    name: String
    scaledDetails: Data // actually Map[String]Data
}

struct TieredScaleAsInt {
    tiers: []TierAsInt
}
